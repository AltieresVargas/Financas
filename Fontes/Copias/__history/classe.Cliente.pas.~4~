unit classe.Cliente;

interface

uses
  FireDAC.Comp.Client, System.SysUtils, Vcl.Forms;

Type
	TCliente = Class
	private
    Fid_cliente       : integer;
    Fstr_nomecliente  : string;
    Fdt_nascimento    : TDate;
    Fstr_cpf          : string;
    Fdt_cadastro      : TDATEtime;
    Fstr_endereco     : string;
    Fstr_num          : string;
    Fstr_complemento  : string;
    Fstr_bairro       : string;
    Fstr_cidade       : string;
    Fstr_uf           : string;
    Fstr_telefone     : string;
    Fstr_obs          : string;
    FConexao          : TFDConnection;
	public
		constructor Create ( Conexao : TFdConnection );
    Destructor  Destroy ; Override;

    function fnc_InserirAlterar (tipoOperacao: string; out Error: string): boolean;
    procedure prc_Deleta (id_Chave: integer);
    function fnc_Cosulta (coluna,texto: string): TFDQuery;

    property id_cliente       : integer       Read Fid_cliente        Write Fid_cliente;
    property str_nomecliente  : string        Read Fstr_nomecliente   Write Fstr_nomecliente;
    property dt_nascimento    : TDate         Read Fdt_nascimento     Write Fdt_nascimento;
    property str_cpf          : string        Read Fstr_cpf           Write Fstr_cpf;
    property dt_cadastro      : TDATEtime     Read Fdt_cadastro       Write Fdt_cadastro;
    property str_endereco     : string        Read Fstr_endereco      Write Fstr_endereco;
    property str_num          : string        Read Fstr_num           Write Fstr_num;
    property str_complemento  : string        Read Fstr_complemento   Write Fstr_complemento;
    property str_bairro       : string        Read Fstr_bairro        Write Fstr_bairro;
    property str_cidade       : string        Read Fstr_cidade        Write Fstr_cidade;
    property str_uf           : string        Read Fstr_uf            Write Fstr_uf;
    property str_telefone     : string        Read Fstr_telefone      Write Fstr_telefone;
    property str_obs          : string        Read Fstr_obs           Write Fstr_obs;
    property Conexao          : TFDConnection Read FConexao           Write FConexao;

  End;


var
	  QryConsulta : TFDQuery;

implementation

uses
    unit_Funcoes;
{ TCliente }

constructor TCliente.Create(Conexao: TFdConnection);
begin
  FConexao := Conexao;
  	QryConsulta := TFDQuery.Create( nil );
	  QryConsulta.Connection := FConexao;
end;

destructor TCliente.Destroy;
begin
  QryConsulta.Destroy;
  FConexao.Connected := False;

  inherited;
end;

function TCliente.fnc_Cosulta(coluna, texto: string): TFDQuery;

begin
  try
	  FConexao.Connected := False;
	  FConexao.Connected := True;



	  QryConsulta.Close;
	  QryConsulta.SQL.Clear;
    QryConsulta.SQL.Add('Select id_cliente, str_nome, str_cpf, str_telefone,dt_nascimento,');
    QryConsulta.SQL.Add('dt_cadastro, dt_alterado, str_endereco, str_num, str_complemento,');
    QryConsulta.SQL.Add('str_bairro, str_cidade, str_uf, str_obs');
    QryConsulta.SQL.Add('from tb_clientes where  :p_Coluna like :p_Texto');
    if coluna = '' then
      begin

        QryConsulta.ParamByName(':p_Coluna').AsString := 'str_nome';
        QryConsulta.ParamByName(':p_Texto').AsString := '%'+ texto +'%';
      end
    else
      begin
        QryConsulta.ParamByName(':p_Coluna').AsString := coluna;
        QryConsulta.ParamByName(':p_Texto').AsString := '%'+ texto +'%';
      end;
    QryConsulta.Open
  finally
    result :=  QryConsulta;
  end;

end;

function TCliente.fnc_InserirAlterar(tipoOperacao: string;
  out Erro: string): boolean;
  var
	    QryInsert : TFDQuery;
begin
    try
      try
    	  FConexao.Connected := False;
	      FConexao.Connected := True;

        QryInsert := TFDQuery.Create( nil );
	      QryInsert.Connection := FConexao;

        QryInsert.Close;
	      QryInsert.SQL.Clear;

        if tipoOperacao = 'INSERIR' then
          begin

            QryInsert.SQL.Add('Insert into tb_operacao_financeira (id_cliente, str_nome, str_cpf, str_telefone,dt_nascimento,');
            QryInsert.SQL.Add('dt_cadastro, dt_alterado, str_endereco, str_num, str_complemento,');
            QryInsert.SQL.Add('str_bairro, str_cidade, str_uf, str_obs');
            QryInsert.SQL.Add('value(:p_id_cliente, :p_str_nome, :p_str_cpf, :p_str_telefone, :p_dt_nascimento, ');
            QryInsert.SQL.Add(':p_dt_cadastro, :p_dt_alterado, :p_str_endereco, :p_str_num, :p_str_complemento, ');
            QryInsert.SQL.Add(':p_str_bairro, :p_str_cidade, :p_str_uf, :p_str_obs)');

          end
        else
          begin

            QryInsert.SQL.Add('Update tb_operacao_financeira set (           ');
            QryInsert.SQL.Add('str_nome         = :p_str_nome,      ');
            QryInsert.SQL.Add('str_cpf          = :p_str_cpf,    ');
            QryInsert.SQL.Add('str_telefone     = :p_str_telefone,               ');
            QryInsert.SQL.Add('dt_nascimento    = :p_dt_nascimento,               ');
            QryInsert.SQL.Add('dt_cadastro,     = :p_dt_cadastro,          ');
            QryInsert.SQL.Add('dt_alterado,     = :p_dt_alterado,            ');
            QryInsert.SQL.Add('str_endereco     = :p_str_endereco,                ');
            QryInsert.SQL.Add('str_num          = :p_str_num,                ');
            QryInsert.SQL.Add('str_complemento  = :p_str_complemento,                ');
            QryInsert.SQL.Add('str_bairro       = :p_str_bairro,                ');
            QryInsert.SQL.Add('str_cidade       = :p_str_cidade,                ');
            QryInsert.SQL.Add('str_uf           = :p_str_uf,                ');
            QryInsert.SQL.Add('str_obs          = :p_str_obs)                ');
            QryInsert.SQL.Add('where id_cliente = :p_id_cliente              ');


        QryInsert.ParamByName(':p_id_cliente  ').AsInteger := Fid_cliente;

        end;


        QryInsert.ParamByName(':p_cli_id_cliente  ').AsInteger := Fcli_id_cliente;
        QryInsert.ParamByName(':p_dt_cadastro  ').AsDateTime := Fdt_cadastro;
        QryInsert.ParamByName(':p_str_tipo_operacao    ').AsString := Fstr_tipoOperacao;
        QryInsert.ParamByName(':p_str_codigo_operacao  ').AsString := Fstr_codigo;
        QryInsert.ParamByName(':p_fl_valor             ').AsFloat  := Ffl_valor;
        QryInsert.ParamByName(':p_fl_saldo             ').AsFloat  := Ffl_Saldo;
        QryInsert.ParamByName(':p_str_descricao        ').AsString := Fstr_descricao;
        QryInsert.ParamByName(':p_dt_operacao          ').AsDate   := Fid_Operacao;
        QryInsert.ParamByName(':p_str_obs              ').AsString := Fstr_obs;

        QryInsert.ExecSQL;
        result := true;
      except
         on e: Exception do
          begin
	          Erro   := e.Message;
	          Result := false;
          end;

      end;
    finally
        QryInsert.Destroy;
    end;
end;


procedure TCliente.prc_Deleta(id_Chave: integer);
var
begin

      if frc_criar_msg('Confirmação', 'Excluir Dados',
			                  'Tem Certeza que deseja EXCLUIR esse CLIENTE? ' +
                        'Todos os Dados Financeiros desse CLIENTE seram Excluidos junto!',
			ExtractFilePath (Application.ExeName) +'\icones\Alerta_Atencao_128.bmp',
      'CONFIRMAR') then
      begin
        FConexao.Connected := False;
        FConexao.Connected := True;

        Fconexao.ExecSQL('Delete from clientes where id_cliente = :id_chave', [id_Chave]);
      end;
end;

end.
